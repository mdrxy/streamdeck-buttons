// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ButtonsListAllButtonsData,
  ButtonsListAllButtonsResponse,
  ButtonsCreateButtonData,
  ButtonsCreateButtonResponse,
  ButtonsReadButtonData,
  ButtonsReadButtonResponse,
  ButtonsUpdateButtonData,
  ButtonsUpdateButtonResponse,
  ButtonsDeleteButtonData,
  ButtonsDeleteButtonResponse,
  ButtonsIncrementButtonUsageData,
  ButtonsIncrementButtonUsageResponse,
  ButtonsGetButtonUsageData,
  ButtonsGetButtonUsageResponse,
  ButtonsUpdateRetirementData,
  ButtonsUpdateRetirementResponse,
  ButtonsGetRetirementsData,
  ButtonsGetRetirementsResponse,
  ButtonsListAllRetirementsData,
  ButtonsListAllRetirementsResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class ButtonsService {
  /**
   * List All Buttons
   * Retrieve all Buttons in the database. Depending on the role of the
   * user making the request, the response may include all Buttons or
   * only those created by the requesting user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ButtonsPublic Successful Response
   * @throws ApiError
   */
  public static listAllButtons(
    data: ButtonsListAllButtonsData = {},
  ): CancelablePromise<ButtonsListAllButtonsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/buttons/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Button
   * Create a new Button.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ButtonPublic Successful Response
   * @throws ApiError
   */
  public static createButton(
    data: ButtonsCreateButtonData,
  ): CancelablePromise<ButtonsCreateButtonResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/buttons/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Button
   * Get a Button by its ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ButtonPublic Successful Response
   * @throws ApiError
   */
  public static readButton(
    data: ButtonsReadButtonData,
  ): CancelablePromise<ButtonsReadButtonResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/buttons/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Button
   * Update an existing Button, if the user has permission.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ButtonPublic Successful Response
   * @throws ApiError
   */
  public static updateButton(
    data: ButtonsUpdateButtonData,
  ): CancelablePromise<ButtonsUpdateButtonResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/buttons/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Button
   * Delete a Button if requesting user has permission. Using the
   * optional query parameter `force=true` will delete the Button
   * even if it has usage history or is not retired.
   * @param data The data for the request.
   * @param data.id
   * @param data.force
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteButton(
    data: ButtonsDeleteButtonData,
  ): CancelablePromise<ButtonsDeleteButtonResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/buttons/{id}",
      path: {
        id: data.id,
      },
      query: {
        force: data.force,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Increment Button Usage
   * Increment the usage count of a Button.
   * @param data The data for the request.
   * @param data.id
   * @returns ButtonPublic Successful Response
   * @throws ApiError
   */
  public static incrementButtonUsage(
    data: ButtonsIncrementButtonUsageData,
  ): CancelablePromise<ButtonsIncrementButtonUsageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/buttons/{id}/increment",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Button Usage
   * Get the usage count and recent uses of a Button.
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getButtonUsage(
    data: ButtonsGetButtonUsageData,
  ): CancelablePromise<ButtonsGetButtonUsageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/buttons/{id}/usage",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Retirement
   * Retire or unretire a Button.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ButtonPublic Successful Response
   * @throws ApiError
   */
  public static updateRetirement(
    data: ButtonsUpdateRetirementData,
  ): CancelablePromise<ButtonsUpdateRetirementResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/buttons/{id}/retire",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Retirements
   * Get retirement records for a Button.
   * @param data The data for the request.
   * @param data.id
   * @returns ButtonRetirementsPublic Successful Response
   * @throws ApiError
   */
  public static getRetirements(
    data: ButtonsGetRetirementsData,
  ): CancelablePromise<ButtonsGetRetirementsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/buttons/{id}/retirements",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List All Retirements
   * List all retirement records for Buttons. Depending on the role of
   * the user making the request, the response may include all Buttons or
   * only those retired by the requesting user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ButtonRetirementsPublic Successful Response
   * @throws ApiError
   */
  public static listAllRetirements(
    data: ButtonsListAllRetirementsData = {},
  ): CancelablePromise<ButtonsListAllRetirementsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/buttons/retirements/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login; get an access token for future requests.
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token to see if it is valid and the user is active.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password recovery - send email with password reset token.
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset a password using a token.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML content for password recovery.
   *
   * TODO: figure out what this is for, and write a better docstring.
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve all users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id. Only superusers can get users other than
   * themselves.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails by generating a test email and sending it to the
   * specified address (superuser only).
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * Simple health check endpoint to verify that the API is running.
   * Used by monitoring tools.
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
